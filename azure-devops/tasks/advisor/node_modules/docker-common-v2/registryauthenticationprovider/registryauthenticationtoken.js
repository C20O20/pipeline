"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tl = require("azure-pipelines-task-lib/task");
const util = require('util');
const acrauthenticationtokenprovider_1 = require("./acrauthenticationtokenprovider");
const genericauthenticationtokenprovider_1 = require("./genericauthenticationtokenprovider");
class RegistryServerAuthenticationToken {
    constructor(username, authenticationPassword, registry, email, xMetaSourceClient) {
        // Replace it with setvariable once vsts-task-lib is updated
        console.log("##vso[task.setvariable variable=CONTAINER_USERNAME;issecret=true;]" + username);
        console.log("##vso[task.setvariable variable=CONTAINER_PASSWORD;issecret=true;]" + authenticationPassword);
        this.registry = registry;
        this.password = authenticationPassword;
        this.username = username;
        this.email = email;
        this.xMetaSourceClient = xMetaSourceClient;
    }
    getUsername() {
        return this.username;
    }
    getPassword() {
        return this.password;
    }
    getLoginServerUrl() {
        return this.registry;
    }
    getEmail() {
        return this.email;
    }
    getDockerConfig() {
        var authenticationToken = new Buffer(this.username + ":" + this.password).toString('base64');
        console.log("##vso[task.setvariable variable=CONTAINER_AUTHENTICATIONTOKEN;issecret=true;]" + authenticationToken);
        var auths = util.format('{"auths": { "%s": {"auth": "%s", "email": "%s" } }, "HttpHeaders":{"X-Meta-Source-Client":"%s"} }', this.registry, authenticationToken, this.email, this.xMetaSourceClient);
        return auths;
    }
    getDockerAuth() {
        var authenticationToken = new Buffer(this.username + ":" + this.password).toString('base64');
        console.log("##vso[task.setvariable variable=CONTAINER_AUTHENTICATIONTOKEN;issecret=true;]" + authenticationToken);
        let auth = util.format('{ "%s": {"auth": "%s", "email": "%s" } }', this.registry, authenticationToken, this.email);
        return auth;
    }
}
exports.default = RegistryServerAuthenticationToken;
function getDockerRegistryEndpointAuthenticationToken(endpointId) {
    var registryType = tl.getEndpointDataParameter(endpointId, "registrytype", true);
    let authToken;
    if (registryType === "ACR") {
        const loginServer = tl.getEndpointAuthorizationParameter(endpointId, "loginServer", false);
        authToken = new acrauthenticationtokenprovider_1.default(endpointId, loginServer).getAuthenticationToken();
    }
    else {
        authToken = new genericauthenticationtokenprovider_1.default(endpointId).getAuthenticationToken();
    }
    return authToken;
}
exports.getDockerRegistryEndpointAuthenticationToken = getDockerRegistryEndpointAuthenticationToken;
