"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
function hasRegistryComponent(imageName) {
    var periodIndex = imageName.indexOf("."), colonIndex = imageName.indexOf(":"), slashIndex = imageName.indexOf("/");
    return ((periodIndex > 0 && periodIndex < slashIndex) ||
        (colonIndex > 0 && colonIndex < slashIndex));
}
exports.hasRegistryComponent = hasRegistryComponent;
function imageNameWithoutTag(imageName) {
    var endIndex = 0;
    if (hasRegistryComponent(imageName)) {
        // Contains a registry component that may include ":", so omit
        // this part of the name from the main delimiter determination
        endIndex = imageName.indexOf("/");
    }
    endIndex = imageName.indexOf(":", endIndex);
    return generateValidImageName(endIndex < 0 ? imageName : imageName.substr(0, endIndex));
}
exports.imageNameWithoutTag = imageNameWithoutTag;
function generateValidImageName(imageName) {
    imageName = imageName.toLowerCase();
    imageName = imageName.replace(/ /g, "");
    return imageName;
}
exports.generateValidImageName = generateValidImageName;
function getBaseImageNameFromDockerFile(dockerFilePath) {
    const dockerFileContent = fs.readFileSync(dockerFilePath, 'utf-8').toString();
    return getBaseImageName(dockerFileContent);
}
exports.getBaseImageNameFromDockerFile = getBaseImageNameFromDockerFile;
function getBaseImageName(contents) {
    var lines = contents.split(/[\r?\n]/);
    var i;
    for (i = 0; i < lines.length; i++) {
        var index = lines[i].toUpperCase().indexOf("FROM");
        if (index != -1) {
            var rest = lines[i].substring(index + 4);
            var imageName = rest.trim();
            return imageName;
        }
    }
    return null;
}
exports.getBaseImageName = getBaseImageName;
function getResourceName(image, digest) {
    var match = image.match(/^(?:([^\/]+)\/)?(?:([^\/]+)\/)?([^@:\/]+)(?:[@:](.+))?$/);
    if (!match) {
        return null;
    }
    var registry = match[1];
    var namespace = match[2];
    var repository = match[3];
    var tag = match[4];
    if (!namespace && registry && !/[:.]/.test(registry)) {
        namespace = registry;
        registry = 'docker.io';
    }
    if (!namespace && !registry) {
        registry = 'docker.io';
        namespace = 'library';
    }
    registry = registry ? registry + '/' : '';
    namespace = namespace ? namespace + '/' : '';
    return "https://" + registry + namespace + repository + "@sha256:" + digest;
}
exports.getResourceName = getResourceName;
