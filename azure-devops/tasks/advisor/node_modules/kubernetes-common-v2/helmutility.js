"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const toolLib = require("vsts-task-tool-lib/tool");
const os = require("os");
const util = require("util");
const uuidV4 = require("uuid/v4");
const tl = require("azure-pipelines-task-lib/task");
const utility_1 = require("./utility");
const helmToolName = 'helm';
const helmLatestReleaseUrl = 'https://api.github.com/repos/helm/helm/releases/latest';
const stableHelmVersion = 'v2.9.1';
function getHelm(version) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return Promise.resolve(tl.which('helm', true));
        }
        catch (ex) {
            return downloadHelm(version);
        }
    });
}
exports.getHelm = getHelm;
function downloadHelm(version) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!version) {
            version = yield getStableHelmVersion();
        }
        let cachedToolpath = toolLib.findLocalTool(helmToolName, version);
        if (!cachedToolpath) {
            let helmDownloadPath;
            try {
                helmDownloadPath = yield toolLib.downloadTool(getHelmDownloadURL(version), helmToolName + '-' + version + '-' + uuidV4() + '.zip');
            }
            catch (exception) {
                throw new Error(tl.loc('HelmDownloadFailed', getHelmDownloadURL(version), exception));
            }
            const unzipedHelmPath = yield toolLib.extractZip(helmDownloadPath);
            cachedToolpath = yield toolLib.cacheDir(unzipedHelmPath, helmToolName, version);
        }
        const helmpath = findHelm(cachedToolpath);
        if (!helmpath) {
            throw new Error(tl.loc('HelmNotFoundInFolder', cachedToolpath));
        }
        fs.chmodSync(helmpath, '777');
        return helmpath;
    });
}
exports.downloadHelm = downloadHelm;
function findHelm(rootFolder) {
    const helmPath = path.join(rootFolder, '*', helmToolName + utility_1.getExecutableExtension());
    const allPaths = tl.find(rootFolder);
    const matchingResultsFiles = tl.match(allPaths, helmPath, rootFolder);
    return matchingResultsFiles[0];
}
function getHelmDownloadURL(version) {
    switch (os.type()) {
        case 'Linux':
            return util.format('https://storage.googleapis.com/kubernetes-helm/helm-%s-linux-amd64.zip', version);
        case 'Darwin':
            return util.format('https://storage.googleapis.com/kubernetes-helm/helm-%s-darwin-amd64.zip', version);
        case 'Windows_NT':
            return util.format('https://storage.googleapis.com/kubernetes-helm/helm-%s-windows-amd64.zip', version);
        default:
            throw Error('Unknown OS type');
    }
}
function getStableHelmVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const downloadPath = yield toolLib.downloadTool('https://api.github.com/repos/helm/helm/releases/latest');
            const response = JSON.parse(fs.readFileSync(downloadPath, 'utf8').toString().trim());
            return response.body.tag_name;
        }
        catch (error) {
            tl.warning(tl.loc('HelmLatestNotKnown', helmLatestReleaseUrl, error, stableHelmVersion));
        }
        return stableHelmVersion;
    });
}
exports.getStableHelmVersion = getStableHelmVersion;
