"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const toolLib = require("vsts-task-tool-lib/tool");
const tl = require("azure-pipelines-task-lib/task");
const util = require("util");
const yaml = require("js-yaml");
const fs = require("fs");
const utility_1 = require("./utility");
const kubectlToolName = 'kubectl';
exports.stableKubectlVersion = 'v1.14.0';
// get a stable version from the url https://storage.googleapis.com/kubernetes-release/release/stable.txt
function getStableKubectlVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        let version;
        const stableVersionUrl = 'https://storage.googleapis.com/kubernetes-release/release/stable.txt';
        return toolLib.downloadTool(stableVersionUrl).then((downloadPath) => {
            version = fs.readFileSync(downloadPath, 'utf8').toString().trim();
            if (!version) {
                version = exports.stableKubectlVersion;
            }
            return version;
        }, (reject) => {
            tl.debug(reject);
            tl.warning(tl.loc('DownloadStableVersionFailed', stableVersionUrl, exports.stableKubectlVersion));
            return exports.stableKubectlVersion;
        });
    });
}
exports.getStableKubectlVersion = getStableKubectlVersion;
function downloadKubectl(version) {
    return __awaiter(this, void 0, void 0, function* () {
        let cachedToolpath = toolLib.findLocalTool(kubectlToolName, version);
        let kubectlDownloadPath = '';
        if (!cachedToolpath) {
            try {
                kubectlDownloadPath = yield toolLib.downloadTool(getkubectlDownloadURL(version));
            }
            catch (exception) {
                throw new Error(tl.loc('DownloadKubectlFailedFromLocation', getkubectlDownloadURL(version), exception));
            }
            cachedToolpath = yield toolLib.cacheFile(kubectlDownloadPath, kubectlToolName + utility_1.getExecutableExtension(), kubectlToolName, version);
        }
        const kubectlPath = path.join(cachedToolpath, kubectlToolName + utility_1.getExecutableExtension());
        if (!cachedToolpath || !fs.existsSync(kubectlPath)) {
            const kubectlPathTmp = path.join(getTempDirectory(), kubectlToolName + utility_1.getExecutableExtension());
            tl.cp(kubectlDownloadPath, kubectlPathTmp, '-f');
            fs.chmodSync(kubectlPathTmp, '777');
            return kubectlPathTmp;
        }
        fs.chmodSync(kubectlPath, '777');
        return kubectlPath;
    });
}
exports.downloadKubectl = downloadKubectl;
function createKubeconfig(kubernetesServiceEndpoint) {
    const kubeconfigTemplateString = '{"apiVersion":"v1","kind":"Config","clusters":[{"cluster":{"certificate-authority-data": null,"server": null}}], "users":[{"user":{"token": null}}]}';
    const kubeconfigTemplate = JSON.parse(kubeconfigTemplateString);
    //populate server url, ca cert and token fields
    kubeconfigTemplate.clusters[0].cluster.server = tl.getEndpointUrl(kubernetesServiceEndpoint, false);
    kubeconfigTemplate.clusters[0].cluster['certificate-authority-data'] = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'serviceAccountCertificate', false);
    const base64ApiToken = Buffer.from(tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'apiToken', false), 'base64');
    kubeconfigTemplate.users[0].user.token = base64ApiToken.toString();
    return JSON.stringify(kubeconfigTemplate);
}
exports.createKubeconfig = createKubeconfig;
function getTempDirectory() {
    return tl.getVariable('agent.tempDirectory') || os.tmpdir();
}
function getkubectlDownloadURL(version) {
    switch (os.type()) {
        case 'Linux':
            return util.format('https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/amd64/kubectl', version);
        case 'Darwin':
            return util.format('https://storage.googleapis.com/kubernetes-release/release/%s/bin/darwin/amd64/kubectl', version);
        case 'Windows_NT':
        default:
            return util.format('https://storage.googleapis.com/kubernetes-release/release/%s/bin/windows/amd64/kubectl.exe', version);
    }
}
function getKubeconfigForCluster(kubernetesServiceEndpoint) {
    const kubeconfig = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'kubeconfig', false);
    const clusterContext = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'clusterContext', true);
    if (!clusterContext) {
        return kubeconfig;
    }
    const kubeconfigTemplate = yaml.safeLoad(kubeconfig);
    kubeconfigTemplate['current-context'] = clusterContext;
    const modifiedKubeConfig = yaml.safeDump(kubeconfigTemplate);
    return modifiedKubeConfig.toString();
}
exports.getKubeconfigForCluster = getKubeconfigForCluster;
